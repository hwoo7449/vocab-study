datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Wordbook {
  id             String         @id @default(cuid())
  name           String
  totalDays      Int
  description    String?
  words          Word[]
  userProgresses UserProgress[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  reports         WordReport[]
}

model Word {
  id             String         @id @default(cuid())
  wordbookId     String
  day            Int
  english        String
  korean         String
  wordbook       Wordbook       @relation(fields: [wordbookId], references: [id])
  userProgresses UserProgress[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  reviews Review[]
  reports         WordReport[]

  @@index([wordbookId, day])
}

model UserProgress {
  id             String   @id @default(cuid())
  userId         String
  wordId         String
  wordbookId     String
  status         String
  lastReviewDate DateTime @default(now())
  nextReviewDate DateTime
  reviewCount    Int      @default(0)
  easeFactor     Float    @default(2.5)
  interval       Int      @default(1)
  consecutiveCorrect Int     @default(0)
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
  word           Word     @relation(fields: [wordId], references: [id])
  wordbook       Wordbook @relation(fields: [wordbookId], references: [id])

  @@unique([userId, wordId])
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String         @unique
  password       String
  role           String?        @default("user")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userProgresses UserProgress[]
  reviewSessions ReviewSession[]
  reports         WordReport[]
}

model ReviewSession {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  reviews   Review[]
  createdAt DateTime @default(now())
}

model Review {
  id              String        @id @default(cuid())
  reviewSessionId String
  reviewSession   ReviewSession @relation(fields: [reviewSessionId], references: [id])
  wordId          String
  word            Word          @relation(fields: [wordId], references: [id])
  isCorrect       Boolean
}

model WordReport {
  id              String   @id @default(cuid())
  wordId          String
  word            Word     @relation(fields: [wordId], references: [id])
  wordbookId      String
  wordbook        Wordbook @relation(fields: [wordbookId], references: [id])
  day             Int
  originalEnglish String
  originalKorean  String
  reportedEnglish String
  reportedKorean  String
  status          String   @default("pending") // pending, accepted, rejected
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  user            User     @relation(fields: [userId], references: [id])
}